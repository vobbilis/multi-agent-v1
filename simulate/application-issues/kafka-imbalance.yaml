apiVersion: v1
kind: Namespace
metadata:
  name: simulation-kafka-issues
  labels:
    scenario: kafka-imbalance
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka
  namespace: simulation-kafka-issues
  labels:
    app: kafka
    scenario: kafka-imbalance
spec:
  serviceName: kafka
  replicas: 3
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
      - name: kafka
        image: bitnami/kafka:2.8.1
        ports:
        - containerPort: 9092
          name: kafka
        - containerPort: 9093
          name: kafka-internal
        env:
        - name: BITNAMI_DEBUG
          value: "true"
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: zookeeper:2181
        - name: KAFKA_CFG_LISTENERS
          value: PLAINTEXT://:9092,INTERNAL://:9093
        - name: KAFKA_CFG_ADVERTISED_LISTENERS
          value: PLAINTEXT://$(MY_POD_NAME).kafka-headless.simulation-kafka-issues.svc.cluster.local:9092,INTERNAL://$(MY_POD_NAME).kafka-headless.simulation-kafka-issues.svc.cluster.local:9093
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
        - name: KAFKA_CFG_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: "true"
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: "3"
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: "2"
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: kafka-data
          mountPath: /bitnami/kafka
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-headless
  namespace: simulation-kafka-issues
  labels:
    app: kafka
spec:
  clusterIP: None
  selector:
    app: kafka
  ports:
  - port: 9092
    name: kafka
  - port: 9093
    name: kafka-internal
---
apiVersion: v1
kind: Service
metadata:
  name: kafka
  namespace: simulation-kafka-issues
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
  - port: 9092
    name: kafka
  - port: 9093
    name: kafka-internal
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: simulation-kafka-issues
  labels:
    app: zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
      - name: zookeeper
        image: bitnami/zookeeper:3.7.0
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: peer
        - containerPort: 3888
          name: leader-election
        env:
        - name: ALLOW_ANONYMOUS_LOGIN
          value: "yes"
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper
  namespace: simulation-kafka-issues
spec:
  selector:
    app: zookeeper
  ports:
  - port: 2181
    name: client
---
apiVersion: batch/v1
kind: Job
metadata:
  name: kafka-topic-creator
  namespace: simulation-kafka-issues
  labels:
    scenario: kafka-imbalance
spec:
  template:
    spec:
      containers:
      - name: topic-creator
        image: bitnami/kafka:2.8.1
        command: ["/bin/bash", "-c"]
        args:
        - |
          echo "Waiting for Kafka to be ready..."
          sleep 60

          echo "Creating normally balanced topic..."
          kafka-topics.sh --create --bootstrap-server kafka:9092 --topic balanced-topic --partitions 12 --replication-factor 2
          
          echo "Creating intentionally imbalanced topics..."
          # Create topics with specific replica assignments to ensure imbalance
          
          # skewed-topic-1: 8 partitions all on broker 0, only one replica
          kafka-topics.sh --create --bootstrap-server kafka:9092 --topic skewed-topic-1 --partitions 8 --replication-factor 1
          
          # skewed-topic-2: 6 partitions all on broker 0, replicated to broker 1 
          kafka-topics.sh --create --bootstrap-server kafka:9092 --topic skewed-topic-2 --partitions 6 --replication-factor 2
          
          echo "Validating topic status..."
          kafka-topics.sh --describe --bootstrap-server kafka:9092 --topic skewed-topic-1
          kafka-topics.sh --describe --bootstrap-server kafka:9092 --topic skewed-topic-2
          
          echo "All topics created. Now generating load..."
          for i in {1..100}; do
            echo "Batch $i: Producing 10000 messages to skewed-topic-1..."
            for j in {1..10000}; do
              echo "Message $j from batch $i at $(date)" | kafka-console-producer.sh --broker-list kafka:9092 --topic skewed-topic-1 &
            done
            wait
            echo "Batch $i: Producing 5000 messages to skewed-topic-2..."
            for j in {1..5000}; do
              echo "Message $j from batch $i at $(date)" | kafka-console-producer.sh --broker-list kafka:9092 --topic skewed-topic-2 &
            done
            wait
            echo "Completed batch $i. Sleeping..."
            sleep 10
          done
      restartPolicy: Never
  backoffLimit: 1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-consumer-app
  namespace: simulation-kafka-issues
  labels:
    app: kafka-consumer
    scenario: kafka-imbalance
spec:
  replicas: 3
  selector:
    matchLabels:
      app: kafka-consumer
  template:
    metadata:
      labels:
        app: kafka-consumer
    spec:
      containers:
      - name: consumer
        image: bitnami/kafka:2.8.1
        command: ["/bin/bash", "-c"]
        args:
        - |
          echo "Waiting for topics to be created..."
          sleep 90
          
          echo "Starting consumer for skewed-topic-1..."
          kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic skewed-topic-1 --group consumer-group-1 > /dev/null &
          
          echo "Starting consumer for skewed-topic-2..."
          kafka-console-consumer.sh --bootstrap-server kafka:9092 --topic skewed-topic-2 --group consumer-group-2 > /dev/null &
          
          echo "Consumers started. Checking consumer group status..."
          while true; do
            echo "Consumer group status at $(date):"
            kafka-consumer-groups.sh --bootstrap-server kafka:9092 --describe --group consumer-group-1
            kafka-consumer-groups.sh --bootstrap-server kafka:9092 --describe --group consumer-group-2
            
            echo "Checking topic partition distribution:"
            kafka-topics.sh --describe --bootstrap-server kafka:9092 --topic skewed-topic-1
            kafka-topics.sh --describe --bootstrap-server kafka:9092 --topic skewed-topic-2
            
            echo "Sleeping for 30 seconds..."
            sleep 30
          done
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-imbalance-scenario-info
  namespace: simulation-kafka-issues
data:
  description: |
    Kafka Partition Imbalance Scenario

    This scenario creates a Kafka cluster with intentionally imbalanced topic partitions.
    While Kafka typically tries to balance partitions across brokers, this scenario
    forces an imbalance by creating topics with specific partition assignments.

    The imbalance creates:
    - Uneven load on Kafka brokers (broker 0 handles most traffic)
    - Processing delays for messages on overloaded brokers
    - Consumer lag on the affected topics
    - Potential performance bottlenecks

    Expected Symptoms:
    - High CPU and memory usage on specific Kafka broker pods
    - Consumer lag increasing on specific topics
    - Slow message processing on affected topics
    - Disparities in throughput rates across topics
    - Some applications experiencing Kafka-related delays

    Root Cause:
    Kafka topic partitions are not evenly distributed across available brokers,
    causing some brokers to handle significantly more load than others. This
    creates a bottleneck in message processing and affects applications consuming
    from the overloaded topics.

    Resolution:
    - Run Kafka's partition reassignment tool to redistribute partitions
    - Increase resources for the overloaded Kafka brokers
    - Optimize consumer configurations (increase fetch size, etc.)
    - Consider adjusting replication factor or partition count for better balance
    - Implement monitoring for partition imbalance detection
  
  investigation-symptoms: |
    Applications consuming from Kafka topics in namespace 'simulation-kafka-issues' 
    are experiencing high latency and lag. Some Kafka broker pods show much higher
    CPU and memory utilization than others. Consumer lag metrics are increasing for
    specific topics despite sufficient resources overall in the cluster. 